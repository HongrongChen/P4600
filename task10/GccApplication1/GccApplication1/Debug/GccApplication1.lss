
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000014e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000fa  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000014e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000180  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  000001c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006fb  00000000  00000000  000001f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000064d  00000000  00000000  000008eb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000283  00000000  00000000  00000f38  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  000011bc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000382  00000000  00000000  00001200  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000018  00000000  00000000  00001582  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  0000159a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 76 00 	call	0xec	; 0xec <main>
  78:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <loop>:
//F_CPU 1000000 UL


void loop()
{
	ADCSRA |=(1<<ADSC); //starts data collection
  80:	ea e7       	ldi	r30, 0x7A	; 122
  82:	f0 e0       	ldi	r31, 0x00	; 0
  84:	80 81       	ld	r24, Z
  86:	80 64       	ori	r24, 0x40	; 64
  88:	80 83       	st	Z, r24
	while (! ADCSRA & (1<<ADIF));//loop until ADC complete
  8a:	80 81       	ld	r24, Z
	
	
	uint16_t lowbyte;
	uint16_t highbyte;	
	//11101101
	lowbyte = ADCL; //00000000 11011101
  8c:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
	highbyte = ADCH;//00000000 00000010
  90:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
	uint16_t finalvalue;
	finalvalue = (highbyte <<8)|lowbyte;
  94:	90 e0       	ldi	r25, 0x00	; 0
  96:	92 2b       	or	r25, r18
	
	
	if(finalvalue<300)
  98:	8c 32       	cpi	r24, 0x2C	; 44
  9a:	21 e0       	ldi	r18, 0x01	; 1
  9c:	92 07       	cpc	r25, r18
  9e:	18 f4       	brcc	.+6      	; 0xa6 <loop+0x26>
	{
		PORTD &= ~(1<<PD5);
  a0:	5d 98       	cbi	0x0b, 5	; 11
		PORTD &= ~(1<<PD6);
  a2:	5e 98       	cbi	0x0b, 6	; 11
		PORTD |=(1<<PD7);
  a4:	5f 9a       	sbi	0x0b, 7	; 11
	}
	if(finalvalue>300 & finalvalue<600)
  a6:	9c 01       	movw	r18, r24
  a8:	2d 52       	subi	r18, 0x2D	; 45
  aa:	31 40       	sbci	r19, 0x01	; 1
  ac:	2b 32       	cpi	r18, 0x2B	; 43
  ae:	31 40       	sbci	r19, 0x01	; 1
  b0:	18 f4       	brcc	.+6      	; 0xb8 <loop+0x38>
	{
		PORTD &= ~(1<<PD5);
  b2:	5d 98       	cbi	0x0b, 5	; 11
		PORTD |=(1<<PD6);
  b4:	5e 9a       	sbi	0x0b, 6	; 11
		PORTD &= ~(1<<PD7);
  b6:	5f 98       	cbi	0x0b, 7	; 11
	}
	if(finalvalue>600)
  b8:	89 35       	cpi	r24, 0x59	; 89
  ba:	92 40       	sbci	r25, 0x02	; 2
  bc:	18 f0       	brcs	.+6      	; 0xc4 <loop+0x44>
	{

		PORTD |=(1<<PD5);
  be:	5d 9a       	sbi	0x0b, 5	; 11
		PORTD &= ~(1<<PD6);
  c0:	5e 98       	cbi	0x0b, 6	; 11
		PORTD &= ~(1<<PD7);
  c2:	5f 98       	cbi	0x0b, 7	; 11
  c4:	08 95       	ret

000000c6 <setup>:

void setup()
{
	

	ADMUX |=(1<<REFS0)|(0<<REFS1);//choose ref source
  c6:	ec e7       	ldi	r30, 0x7C	; 124
  c8:	f0 e0       	ldi	r31, 0x00	; 0
  ca:	80 81       	ld	r24, Z
  cc:	80 64       	ori	r24, 0x40	; 64
  ce:	80 83       	st	Z, r24
	ADMUX |=(0<<MUX3)|(1<<MUX2)|(0<<MUX1)|(1<<MUX0);//output channel at ADC5
  d0:	80 81       	ld	r24, Z
  d2:	85 60       	ori	r24, 0x05	; 5
  d4:	80 83       	st	Z, r24
	ADCSRA |=(1<<ADEN);//turn ADC ON
  d6:	ea e7       	ldi	r30, 0x7A	; 122
  d8:	f0 e0       	ldi	r31, 0x00	; 0
  da:	80 81       	ld	r24, Z
  dc:	80 68       	ori	r24, 0x80	; 128
  de:	80 83       	st	Z, r24
	ADCSRA |=(0<<ADPS2)|(0<<ADPS1)|(0<<ADPS0);//prescaler div = 2
  e0:	80 81       	ld	r24, Z
  e2:	80 83       	st	Z, r24
	DDRD |=(1<<PD5)|(1<<PD6)|(1<<PD7);//set as output pins
  e4:	8a b1       	in	r24, 0x0a	; 10
  e6:	80 6e       	ori	r24, 0xE0	; 224
  e8:	8a b9       	out	0x0a, r24	; 10
  ea:	08 95       	ret

000000ec <main>:

}

int main()
{
	setup();
  ec:	0e 94 63 00 	call	0xc6	; 0xc6 <setup>
	while(1) loop();
  f0:	0e 94 40 00 	call	0x80	; 0x80 <loop>
  f4:	fd cf       	rjmp	.-6      	; 0xf0 <main+0x4>

000000f6 <_exit>:
  f6:	f8 94       	cli

000000f8 <__stop_program>:
  f8:	ff cf       	rjmp	.-2      	; 0xf8 <__stop_program>
